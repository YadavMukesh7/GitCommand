1.To check git version

	git -v

2.To configure the git username and email

	git config --global user.name "Your Name"
	git config --global user.email "Your Email"

3.To add the file (To move in staging area)

	git add <File name>

4. To add the all file in staging area

	git add .
	
	git add <File name, File name,....>

5. To Unstage the file

	git rm --cached <File name>

6.To commit the file 

	git commit -m "<Commit message>"

7.To commit without message

	git commit

        *If we commit the file without any message it will open an editor if you want to write message you can write the message and you want to save this message as commit message 
	press ESC button and type :wq and hit enter it will save your commit message
	If you do not want to save the message you want to exit from this editor then press ESC button and type :q! and hit enter you will be come out the editor without saving message

8. To add all the file and commit in single command 

	git commit -am"Commit message"

9. To check commit history

	git log
	
	* If we want to see commit history with bit information the we can use command like

		git log --oneline
	
	
10.To add new changes in previous commit without a new commit

	git commit --amend

	*it will open an editor if you want to write message you can write the message and you want to save this message as new message 
	press ESC button and type :wq and hit enter it will save your new message with previous commit
	If you do not want to write new message you can exit from this editor then press ESC button and type :q! and hit enter you will be come out the editor without saving message

11. To add new changes in previous commit without a new commit but a new message

	git commit --amend -m"<New message>"

12.To see current branch

	git branch OR git status

13. To create new branch 

	git branch <Branch name>

14.To switch one branch to another branch

	git switch <Branch name>
			OR
	git checkout <Branch name>

15. To create a new branch and switch in this using one command

	git switch -c <Branch name>
			OR
	git checkout -b <Branch name>

16.To merge the our latest code in a branch first switch inside the branch in which branch you want to merge the code then use command 

	git merge <Branch name>

17.To delete the branch 

	git branch -d <Branch name>

	*If branch you want to delete is not merge it will throw the error first merge branch then delete
	 but you want to delete the branch forcefully you can use command 
	
	git branch -D <Branch name>

	Note:- If you want to delete any branch first you have to switch any other branch then you can delete the branch 
		  But if you want to rename the branch then we have to be in same branch 

18.To rename the branch name 

	git branch -m <New Branch name>

19.To see difference between current working directory and last commit 

	git diff


20. To see any specific file 

	git diff <File name >

21. If you want to see differences between staging are and last commit

	git diff -- staged

22. We can see difference between two commit 

	git diff <First commit id> <Second commit id>

23.To restore from staging are 

	git restore --staged 

24.To discard changes 

	git restore .


*************************************************************************************************************Git StashCommand******************************************************************************************************



25.The git stash command in Git is used to temporarily save changes that are not yet ready to be committed. It allows you to "stash" your modifications away and return to a clean working directory,
     so you can switch branches or perform other tasks without losing your changes.

     1.Basic Usage:

		git stash

			 This command stashes your changes, both staged (added) and unstaged, so your working directory is clean. It saves these changes in a special area and reverts your files back to the state of the 			 last  commit.

      2.List Stashes:

		git stash list

			This command shows all stashed changes you have saved, along with an identifier for each stash.

     3.Apply Stash:

		git stash apply [stash@{n}]

			This applies the changes from a specific stash back into your working directory. If you don't specify a stash, it will apply the most recent one.

     4.	Pop Stash:

		git stash pop

			This applies the most recent stash and then removes it from the stash list. It's a combination of applying and deleting the stash.

    5.Drop Stash:

     		git stash drop [stash@{n}]

     			  This deletes a specific stash from the list.

    6.Clear All Stashes:

		git stash clear

			This deletes all stashed changes.
	
     7.Git Stash with message 
		
		git stash -m "<Your message>" -- <file name>

      
****************************************************************************Git Restore Command**************************************************************************************

26.Git Restore Command
	
	1.git restore <file>

  	 	 *Restore a file to its last committed state (discard local changes)

	2.git restore .
  
  		 *Restore all files to their last committed state

	3.git restore --staged <file>
	
 	  	*Restore a file from the index (staging area) to the working directory
    	  	 This will unstage the file, but keep the changes in your working directory.

	4.git restore --staged .

     	  	 *Restore all files from the staging area
	
	5.git restore --source=<commit-hash> <file>

	git restore --source=abcd1234 index.html

	  	 *Restore a file from a specific commit


***************************************************************************Git Reset Command*************************************************************************************

27.Gtit Reset Command

     1.git reset
	
	* You added some files to be committed but changed your mind 

	Ex-:   git add file1.txt,file2.txt 		# Add files to staging area
		 git reset					# Unstage the changes


	* Undo Last Commit(Soft Reset)
		
		You committed something but there is a mistake and you want to make changes 
		before committing again.
        
	Ex-: git commit -m "Incorrect commit"	# Made commit with a mistake 

		git reset --soft HEAD~1			#Undo the last commit but keep changes


	* Undo Last Commit and Unstage Changes (Mixed Reset)

		You committed something but you want to unstage the changes as well.

	Ex-: git commit -m "Unwanted commit "	# Make an unwanted commit
	
		git reset --mixed HEAD~1 			# Undo the last commit and unstage the changes

	* Discard Changes(Hard Reset)
		

		You made changes and want to completely throw them away
	
	Ex-: git add .			# Add all changes to staging area 

	       git reset --hard 		# Discard changes and reset to the last commit 


	*Soft reset to a specific commit 
	
		git reset --soft <Commit-hash>
			
			Reset to a specific commit, keeping changes in the working directory

	*Mixed reset to a specific commit 
	
		git reset --mixed <Commit-hash>
			
			Reset to a specific commit, unstage changes and keep them in the working directory 

	*Hard reset to a specific commit 
		
		git reset --hard <commit-hash>

			Reset to a specific commit, discarding all changes  

   ***********************************************************************Git Revert************************************************************************************************

	*It creates a new commit that undoes the changes of a specific commit.
	*It's useful when you want to undo changes but keep the history intact.
		
		Find the commit you want to undo
		
			git log --oneline
		
	      Revert the commit
			
			git revert <Commit-hash>
		
	
		



	
